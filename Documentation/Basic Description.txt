// This is a basic description of what the code should do

###############################
##   GENERAL RULES OF THUMB  ##
###############################

1 - This langugage is STRONGLY typed
    * The only two types are NUMBER (float) and TEXT 
    * There is also the "nothing" type

2 - This langugage has NO OBJECTS (at least for now)

3 - Users can define their own types (like a C struct)

4 - No confusing sigils

5 - EVERYTHING WILL BE LOWERCASE!!! (but the lexeme still needs to remember case)

##################################
##           STRUCTURE          ##
##################################

All lines in this program are per-line (like python)
  - there are no line ending sigils

The global program is defined in two sections:
  - a definition section for functions and global variables
  - a program section for the main body of the code

"""
  definitions
    ...
    (structure section)
    (global section)
    (function section)
    ...
  end definitions
  program
    ...
  end program
"""

All structured elements are in the form:
  - "keyword"
  - (the body of the structure)
  - "end keyword"

Functions are in the form:
    function <name> ( <args> ) returns < type >
      ...
    end function

############################
## LOOPS AND CONDITIONALS ##
############################

"""
while < condition >
  ...
end while

if < condition >
  ...
end if

if < condition >
  ...
else
  ...
end if

if < condition >
  ...
else if < condition >
  ...
else
  ...
end if

repeat
  ...
end repeat

repeat < number > times
  ...
end repeat

repeat for all (x) in (y)
  ...
end repeat

***Conditionals are ALWAYS required to have a comparison of some sort
***'break' and 'quit' are both good keywords for breaking a loop/program

#########################
##     FUNCTIONS       ##
#########################

"""
function < name > ( <args> ) returns < number | text | nothing >
  ..
end function
"""

 - All arguments are passed by-value by default
 - Using the keyword "changable" changes this syntax to use something by reference

"""
function < name > ( < name > : 'changable' < type or struct > ... )
  ...
end function
"""


##############################
##   VARIABLES AND ARRAYS   ##
##############################

"""
< name > : < number | text >
< name > , < name >, < name > : < number | text >
< name > , ... : < number | text > = < value >
"""

*Variables CANNOT change type, and types CANNOT be coerced
** Number types CAN start with just a period

*For now, TEXT only allows for addition, but coerces everything into TEXT
*TEXT can also be compared, done lexiographically
*TEXT can be indexed in the same way as arrays

"""
< name > : array [ < size > ] of < number | text >
< name > : array [ < size > , < size > ..., < size > ] of < number | text >
< name > : array [ < start_index > 'to' < end_index > , ... ] of < number | text >
"""

*Arrays start indexing at 1, and can be multi-dimensional
*When expecting an array from a function definition you can use:
 """function < name > ( < name > : array of < number | text > ) returns ... """
*Allow for setting custom bounds with the 'to' keyword (array [2 to 5] of number)

"""
< name >[< index >]
"""
This is how you index the array

"""
< name > : array of numbers = { 1, 2, 3, 4, ... }
"""
Arrays can also be instantiated (this means they won't need the size definition)


"""
length(< array name >)
dimensions(< array name >)
"""
Built-in function to get array length (the total number of elements)
Built-in function to get dimensions (an array of each dimension)
  ex: '{5,2,4}' for a 5 by 2 by 4 array

###############################
##     CUSTOM STRUCTURES     ##
###############################

"""
structure < name > 
   < name > : < type > 
   < name > : < type > = default value
end structure
"""

Structures will be treated as tuples, containg all of their elements
 in contiguous chunks of memory.

"""
x : < structure > = { a, b, c, ... } 
display(x.a, x.b, x.c)
"""


#################################
##     OPERATORS (AND OOp)     ##
#################################

Priority   | Symbol     | Description 
======================================
1          | ()         | Parenthesis
2          | +          | Absolute value
3          | bit_not    | bitwise not
4          | -          | Negative
4          | ^          | Pow 
5          | *          | Multipy 
5          | /          | Divide 
5          | %          | Modulo
6          | +          | Add 
6          | -          | Subtract 
7          | bit_sl     | Shift Left
7          | bit_sr     | Shift Right
8          | bit_and    | Bitwise And
9          | bit_xor    | Bitwise XOR
10         | bit_or     | Bitwise Or 
11         | <          | Less Than
11         | >          | Greater Than 
11         | <=         | Less Than or Equal 
11         | >=         | Greater Than or Equal 
11         | =          | Equal
11         | !=         | Not Equal 
12         | and        | And (logical)
13         | or         | Or (logical)
==========================================
14         | =          | Assignment

** The comprarables (<, >, =, !=, <=, >=) and the logicals (and, or)
    can only be applied to conditional statements



################################
##   BUILT-IN FUNCTIONALITY   ##
################################

length(< array name >)
length(< text name >)
dimensions(< array name >)
lower_bound(< array name >)
upper_bound(< array name >)

""" STANDARD LIBRARY FUNCTIONS """
input_number()
input_text()
display( < text > , < text > , ... )
display_line( < text > , < text > , ... )

wait(< number >< time_unit >)
wait(< name >< time_unit >)
* this will need some custom processing

## TRIG ##
sin( < number > )
cos( < number > )
tan( < number > )
csc( < number > )
sec( < number > )
cot( < number > )
asin( < number > )
acos( < number > )
atan( < number > )

## ROUNDING ##
round( < number > )
floor( < number > )
ceil( < number > )

## RANDOM ##
random_number()
random_number(< min > , < max >)



###########################
##      OTHER NOTES      ##
###########################

 - Included support for the following special characters:
   "\n" = newline
   "\t" = tab
   "\\" = backslash
   "\""  = quote literal

 - Boolean types do exist as numbers:
   0 = False
   1 = True (by default)
   !0 = True (implied)

 - This language is forgiving and will allow for dangling commas
  EX: x : array [4] of number = { 1, 2, 3, 4, }
                                            ^ this is fine

 - When outputing NUMBERs, try to catch floating points that
    are integers (ex: 5.0000000135 >> 5), with 6 decimal places
    of accuracy

 - ASCII is the only allowed character set, all other characters
    should throw an error ("can only contain printable ASCII characters")