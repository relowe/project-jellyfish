############################
#       SYNTAX NOTES       #
############################

To simplify our BNF, some special syntax will be used

-= Parenthesis =-
Parenthesis signify the leading token of the
  child non-terminal, which has been used in the parser
  to determine when to branch to different non-terminals

EX: < optional_arg > ::= (id) < arg >
                       | ''

This signifies that if there is an ID token currently,
 then < arg > should be called, otherwise this
 non-terminal is expected to be empty ('')

-= REGEX Notation =-
Some sections of the BNF have been simplified into regex
 notation. In this notation, we will wrap square brackets
 '[]' around any terminals/non-terminals and follow them
 with a regex character. The main regex characters are
 '*' which means "zero or more"
 '+' which means "one or more"
 '?' which means "zero or one"

 Ex: < args > ::= [< arg > COMMA]*
 This means that "< args >" will have zero or many
  "< arg >", that are each followed by a comma


 -= Side Note =-
 To avoid excessively long lines, some non-terminal branches
  have been split into multiple lines. Watch the vertical
  bars to know when a new branch is defined.

############################
#           BNF            #
############################

< CODE >                 ::= DEF < definitions > < program >
                           | < program >

< definitions >          ::= < structure-defs > < global-defs > < function-defs > 
                             END DEF

< structure-defs >       ::= < structure-def > < structure-defs >
                           | ''

< structure-def >        ::= STRUCT ID < strucutre-arg > < structure-args > 
                             END STRUCT

< structure-args >       ::= (ID) < structure-arg > < structure-args >
                           | ''

< structure-arg >        ::= < variable-def >

< global-defs >          ::= (ID) < global-def > < global-defs >
                           | ''

< global-def >           ::= < assign_or_var_def >

< function-defs >        ::= (FUNCTION) < function-def > < function-defs >
                           | ''

< function-def >         ::= FUN ID LPAREN < parameters > RPAREN 
                              RETURNS < fun-return-type > < fun-statements > 
                              END FUN

< parameters >           ::= (ID) < parameter > < parameters' >
                           | ''                         
						   
< parameters' >        ::= COMMA < parameters >
						   | ''

< parameter >          ::= ID COLON [CHANGEABLE]? < fun-arg-type >

< fun-arg-type >         ::= < basic-type >
                           | ARRAY < fun-arg-type' >

< fun-arg-type' >        ::= OF < basic-type >
                           | LBRACKET < bounds > RBRACKET OF < basic-type >

< fun-return-type >      ::= NOTHING
                           | < basic-type >

< fun-statements >       ::= < fun-statement > < fun-statements >
                           | ''

< fun-statement >        ::= RETURN < return-value >
                           | < statement >

< return-value >         ::= NOTHING
                           | < resolvable >

==================================================================================

< program >              ::= PROGRAM < statements > END PROGRAM

< statements >           ::= < statement > < statements >
                           | ''

< statement >            ::= (ID) < asg or var-def or res >
                           | (WHILE) < while >
                           | (IF) < if >
                           | (REPEAT) < repeat >
                           | (UNLINK) < unlink >
                           | QUIT
                           | < resolvable >
						   
< asg or var-def or res >::= (ID) (COLON) < variable-def >
                           | IDS COLON < variable-def >
						   | < reference > EQ < assignment' >
                           | < reference > < resolvable2 >

< asg or var-def >       ::= (ID) (COLON) < variable-def >
                           | IDS COLON < variable-def >
						   | < reference > EQ < assignment' >

< unlink >               ::= UNLINK < reference >

< loop-statements >      ::= < loop-statement > < loop-statements >
                           | ''

< loop-statement >       ::= BREAK
                           | CONTINUE
                           | < statement >

< variable-def >         ::= < ids > COLON < variable-type > < var-def-equal >

< ids >                  ::= ID < ids' >
						 
< ids' >        		 ::= COMMA [< ids >]?
						   | ''

< var-def-equal >        ::= EQ < resolvable >
                           | ''

< variable-type >        ::= < basic-type >
                           | ARRAY < type or bounds >
                           | LINK TO < basic-type >

< type or bounds >       ::= OF < basic-type >
                           | LBRACKET < bounds > RBRACKET OF < basic-type >

< basic-type >           ::= NUMBER
                           | TEXT
                           | ID     // for structures

< bounds >               ::= < bound > < bounds' >
                           | ''
						 
< bounds' >        		 ::= COMMA < bounds >
						   | ''

< bound >                ::= < resolvable > < bound' >
						   
< bound' >				 ::= TO < resolvable >
						   | ''

< assignment >           ::= < reference > EQ < assignment' >

< assignment' >          ::= LINK TO < reference >
                           | < resolvable >

< while >                ::= WHILE < condition > < loop-statements > END WHILE

< if >                   ::= IF < condition > THEN < loop-statements > < if2 >

< if2 >                  ::= END IF
                           | ELSE < if2 elif >

< if2 elif >			 ::= (IF) < if >
						   | < loop-statements > END IF

< repeat >               ::= REPEAT < repeat' >

< repeat' >              ::= FOREVER < loop-statements > END REPEAT
                           | NUMBER TIMES < loop-statements > END REPEAT
                           | FOR ALL ID IN < resolvable > < loop-statements > END REPEAT

< condition >            ::= < logic-andable > < condition' >
						   
< condition' >           ::= OR < logic-andable > < condition' >           
                           | ''

< logic-andable >        ::= < logic-paren >  < logic-andable' >

< logic-andable' >       ::= AND < logic-paren > < logic-andable' >
                           | ''

< logic-paren >          ::= LPAREN < condition > RPAREN
                           | < comparable >

< comparable >           ::= ID < comparable' >
                           | < resolvable > < comparable'' >

< comparable' >          ::= IS < linked or not >
                           | < resolvable' > < comparable'' >

< comparable'' >         ::= GT < resolvable >
                           | LT < resolvable >
                           | GE < resolvable >
                           | LE < resolvable >
                           | EQ < resolvable >
                           | NE < resolvable >

< linked or not >        ::= LINKED
						   | WORDNOT LINKED

< resolvable >           ::= < bit-orable >

< resolvable' >          ::= < ref-or-call > < factor' > < term' > 
                             < expression' > < bit-shiftable' > < bit-andable' > 
                             < bit-xorable' > < bit-orable' >

====================================
< bit-orable >           ::= < bit-xorable > < bit-orable' >
						   
< bit-orable' >			 ::= BOR < bit-orable >
						   | ''

< bit-xorable >          ::= < bit-andable > < bit-xorable' >
						   
< bit-xorable' >		 ::= BXOR < bit-xorable >
						   | ''

< bit-andable >          ::= < bit-shiftable >  < bit-andable' >
						   
< bit-andable' >		 ::= BAND < bit-andable >
						   | ''

< bit-shiftable >        ::= < expression > < bit-shiftable' >

< bit-shiftable' >       ::=  BSL < bit-shiftable >
                           |  BSR < bit-shiftable >
                           | ''

< expression >           ::= < term > < expression' >

< expression' >			 ::= ADD < expression >
                           | SUB < expression >
                           | ''

< term >                 ::= < factor > < term' >

< term' >                ::= MUL < term >
                           | DIV < term >
                           | MOD < term >
                           | ''

< factor >               ::= < bit-notable > < factor' >
                           | SUB < factor >

< factor' >              ::= POW < factor >
                           | ''

< bit-notable >          ::= BNOT < exponent >
                           | < exponent >

< exponent >             ::= ADD < exponent >
                           | LPAREN < resolvable > RPAREN
                           | NUMBER
                           | TEXT
                           | ID < ref-or-call >
                           | (LCURLY) < struct-lit >
                           | (LBRACKET) < array-lit >

< ref-or-call >			 ::= LPAREN < call' >
						   | < reference' >

< struct-lit >           ::= LCURLY < struct-items > RCURLY

< struct-items >         ::= < resolvable > < struct-items' >
                           | LINK TO < ref-or-nothing >
                           | ''

< struct-items' >        ::= COMMA < struct-items'' >
						   | ''

< struct-items'' >       ::= < resolvable > < struct-items' >
                           | LINK TO < ref-or-nothing >
						   | ''

< ref-or-nothing >       ::= NOTHING
                           | < reference >

< array-lit >            ::= LBRACKET < array-items > RBRACKET

< array-items >          ::= < resolvable > < array-items' >
                           | ''

< array-items' >         ::= COMMA < array-items >
                           | ''

< reference >            ::= ID < reference' >

< reference' >           ::= LBRACKET < index > RBRACKET < reference' >
                           | PERIOD ID < reference' >
						   | ''

< index >                ::= < resolvable > < index' >
                           | ''

< index' >				 ::= COMMA < index >
						   | ''

< call >                 ::= ID LPAREN < call' >

< call' >                ::= < arg-list > RPAREN
                           | RPAREN

< arg-list >             ::= < resolvable > < arg-list' >

< arg-list' >            ::= COMMA [< arg-list >]?
                           | ''