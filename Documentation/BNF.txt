// This will hold the BNF for the language

< CODE >                 ::= 'definitions' < definitions > < program >
                           | < program >

< definitions >          ::= < structure-defs > < global-defs > < function-defs > 
                             'end' 'definitions'

< structure-defs >       ::= < structure-def > < structure-defs >
                           | ''

< structure-def >        ::= 'structure' < id > < strucutre-arg > < structure-args > 
                             'end' 'structure'

< structure-args >       ::= < structure-arg > < structure-args >
                           | ''

< structure-arg >        ::= < variable-def >

< global-defs >          ::= < global-def > < global-defs >
                           | ''

< global-def >           ::= < ids > ':' < variable-type > '=' < resolvable >

< function-defs >        ::= < function-def > < function-defs >
                           | ''

< function-def >         ::= 'function' < id > '(' < fun-def-args > ')' 
                              'returns' < fun-return-type > < fun-statements > 
                              'end' 'function'

< fun-def-args >         ::= < fun-def-arg >
                           | < fun-def-arg > ',' < fun-def-args >

< fun-def-arg >          ::= < id > ':' < changeable > < fun-arg-type >

< changeable >            ::= 'changeable'
                           | ''

< fun-arg-type >         ::= < basic-type >
                           | 'array' 'of' < basic-type >
                           | 'array' '[' < bounds > ']' 'of' < basic-type >

< fun-return-type >      ::= 'nothing'
                           | < basic-type >

< fun-statements >       ::= < fun-statement > < fun-statements >
                           | ''

< fun-statement >        ::= 'return' < return-value >
                           | < statement >

< return-value >         ::= < resolvable >
                           | ''

==================================================================================

< program >              ::= 'program' < statements > 'end' 'program'

< statements >           ::= < statement > < statements >
                           | ''

< statement >            ::= < assignment >
                           | < variable-def >
                           | < while >
                           | < if >
                           | < repeat >
                           | < resolvable >
                           | < unlink >
                           | 'quit'

< unlink >               ::= 'unlink' < reference >

< loop-statements >      ::= < loop-statement > < loop-statements >
                           | ''

< loop-statement >       ::= 'break'
                           | 'continue'
                           | < statement >

< variable-def >         ::= < ids > ':' < variable-type > < var-def-equal >

< ids >                  ::= < id > ',' < ids >
                           | < id >
                           | ''

< var-def-equal >        ::= '=' < resolvable >
                           | ''

< variable-type >        ::= < basic-type >
                           | 'array' '[' < bounds > ']' 'of' < basic-type >
                           | 'array' 'of' < basic-type >
                           | 'link' 'to' < basic-type >

< basic-type >           ::= 'number'
                           | 'text'
                           | < id > // for structures

< bounds >               ::= < bound > 
                           | < bound > ',' < bounds >
                           | ''

< bound >                ::= < resolvable >
                           | < resolvable > 'to' < resolvable >

< assignment >           ::= < reference > '=' < resolvable >
                           | 'link' 'to' < reference >

< while >                ::= 'while' < condition > < loop-statements > 'end' 'while'

< if >                   ::= 'if' < condition > 'then' < loop-statements > < if2 >

< if2 >                  ::= 'end' 'if'
                           | 'else' < if >
                           | 'else' < loop-statements > 'end' 'if'

< repeat >               ::= 'repeat' < loop-statements > 'end' 'repeat'
                           | 'repeat' < int-lit > 'times' < loop-statements > 'end' 'repeat'
                           | 'repeat' 'for' 'all' < id > 'in' < id > < loop-statements > 'end' 'repeat'

< condition >            ::= < logic-andable > 'or' < condition >           
                           | < logic-andable >

< logic-andable >        ::= < logic-paren > 'and' < logic-andable >
                           | < logic-paren >

< logic-paren >          ::= '(' < condition > ')'
                           | < comparable >

< comparable >           ::= < resolvable > '>' < resolvable >
                           | < resolvable > '<' < resolvable >
                           | < resolvable > '>=' < resolvable >
                           | < resolvable > '<=' < resolvable >
                           | < resolvable > '=' < resolvable >
                           | < resolvable > '!=' < resolvable >
                           | < resolvable > 'is' 'linked'
                           | < resolvable > 'is' 'not' 'linked'

< resolvable >           ::= < bit-orable >

< bit-orable >           ::= < bit-xorable > 'bit_or' < bit-orable >
                           | < bit-xorable >

< bit-xorable >          ::= < bit-andable > 'bit_xor' < bit-xorable >
                           | < bit-andable >

< bit-andable >          ::= < bit-shiftable > 'bit_and' < bit-andable >
                           | < bit-shiftable > 

< bit-shiftable >        ::= < expression > 'bit_sl' < bit-shiftable >
                           | < expression > 'bit_sr' < bit-shiftable >
                           | < expression >

< expression >           ::= < term > '+' < expression >
                           | < term > '-' < expression >
                           | < term >

< term >                 ::= < factor > '*' < term >
                           | < factor > '/' < term >
                           | < factor > 'mod' < term >
                           | < factor >

< factor >               ::= < exponent > '^' < factor >
                           | '-' < factor >
                           | < exponent >

< bit-notable >          ::= 'bit_not' < exponent >
                           | < exponent >

< exponent >             ::= '+' < exponent >
                           | '(' < resolvable > ')'
                           | < number-lit >
                           | < text-lit >
                           | < reference >
                           | < call >
                           | < array-struct-lit >

< array-struct-lit >     ::= '{' < array-struct-items > '}'

< array-struct-items >   ::= < resolvable > ',' < array-struct-items >
                           | < resolvable >
                           | '' 

< number-lit >           ::= < float-lit >
                           | < int-lit >

< float-lit >            ::= < int-lit > '.' < int-lit >
                           | '.' < int-lit >

< int-lit >              ::= < DIGITS >

< text-lit >             ::= '"' < CHARACTERS > '"'
                           | "'" < CHARACTERS > "'"

< reference >            ::= < id >
                           | < id > '[' < index > ']'
                           | < id >'.'< id >

< index >                ::= < resolvable >
                           | < resolvable > ',' < index >
                           | ''

< call >                 ::= < id > '(' < arg-list > ')'
                           | < id > '(' ')'

< arg-list >             ::= < resolvable > ',' < arg-list >
                           | < resolvable >
                           | ''

< id >                   ::= < LETTER > < id2 >
                           | '_' < id2 >

< id2 >                  ::= < LETTER > < id2 >
                           | < DIGIT > < id2 >
                           | '_' < id2 >
                           | ''