// This is a basic description of what the code should do

###############################
##   GENERAL RULES OF THUMB  ##
###############################

1 - This langugage is STRONGLY typed
    * The only two types are NUMBER (float) and TEXT 
    * There is also the "nothing" type

2 - This langugage has NO OBJECTS (at least for now)

3 - Users can define their own types (like a C struct)

4 - No confusing sigils

##################################
##           STRUCTURE          ##
##################################

All lines in this program are per-line (like python)
  - there are no line ending sigils

The global program is defined in two sections:
  - a definition section for functions and global variables
  - a program section for the main body of the code

"""
  definitions
    ...
    (structure section)
    (global section)
    (function section)
    ...
  end definitions
  program
    ...
  end program
"""

All structured elements are in the form:
  - "keyword"
  - (the body of the structure)
  - "end keyword"

Functions are in the form:
    function <name> ( <args> ) returns < type >
      ...
    end function

############################
## LOOPS AND CONDITIONALS ##
############################

"""
while < condition >
  ...
end while

if < condition >
  ...
end if

if < condition >
  ...
else
  ...
end if

if < condition >
  ...
else if < condition >
  ...
else
  ...
end if

repeat
  ...
end repeat

repeat < number > times
  ...
end repeat

repeat for all (x) in (y)
  ...
end repeat



#########################
##     FUNCTIONS       ##
#########################

"""
function < name > ( <args> ) returns < number | text | nothing >
  ..
end function
"""

 - All arguments are passed by-value by default
 - Using the keyword "changable" changes this syntax to use something by reference

"""
function < name > ( < name > : 'changable' < type or struct > ... )
  ...
end function
"""


##############################
##   VARIABLES AND ARRAYS   ##
##############################

"""
< name > : < number | text >
< name > , < name >, < name > : < number | text >
< name > , ... : < number | text > = < value >
"""

*Variables CANNOT change type, and types CANNOT be coerced
** Number types CAN start with just a period

*For now, TEXT has no mathematical functionality

"""
< name > : array [ < size > ] of < number | text >
< name > : array [ < size > , < size > ..., < size > ] of < number | text >
"""

*Arrays start indexing at 1, and can be multi-dimensional
*When expecting an array from a function definition you can use:
 """function < name > ( < name > : array of < number | text > ) returns ... """

"""
< name >[< index >]
"""
This is how you index the array

"""
length(< array name >)
"""
Built-in function to get array length

###############################
##     CUSTOM STRUCTURES     ##
###############################

"""
structure < name > 
   < name > : < type > 
   < name > : < type > = default value
end structure
"""

Structures will be treated as tuples, containg all of their elements
 in contiguous chunks of memory.

"""
x : < structure > = { a, b, c, ... } 
display(x.a, x.b, x.c)
"""


#################################
##     OPERATORS (AND OOp)     ##
#################################

Priority   | Symbol     | Description 
======================================
1          | ()         | Parenthesis
1.5        | not        | bitwise not
2          | !          | Not (logical)
3          | -          | Negative
3          | ^          | Pow 
4          | *          | Multipy 
4          | /          | Divide 
4          | %          | Modulo
5          | +          | Add 
5          | -          | Subtract 
6          | sl         | Shift Left
6          | sr         | Shift Right
7          | <          | Less Than
7          | >          | Greater Than 
7          | <=         | Less Than or Equal 
7          | >=         | Greater Than or Equal 
(8) 7      | =          | Equal
(8) 7      | !=         | Not Equal 
9          | and        | Bitwise And
10         | xor        | Bitwise XOR
11         | or         | Bitwise Or 
12         | &&         | And (logical)
13         | ||         | Or (logical)
14         | =          | Assignment

** Logical statements will be ignored in conditionals (only bitwise allowed)



################################
##   BUILT-IN FUNCTIONALITY   ##
################################

length(< array name >) ## does NOT allow 'length(< text name >)'
lower_bound(< array name >)
upper_bound(< array name >)

""" STANDARD LIBRARY FUNCTIONS """
input_number()
input_text()
display( < text > , < text > , ... )
display_line( < text > , < text > , ... )

wait(< number > , < time_unit >)

## TRIG ##
sin( < number > )
cos( < number > )
tan( < number > )
csc( < number > )
sec( < number > )
cot( < number > )
asin( < number > )
acos( < number > )
atan( < number > )

## ROUNDING ##
round( < number > )
floor( < number > )
ceil( < number > )

## RANDOM ##
random_number()
random_number(< min > , < max >)



###########################
##      OTHER NOTES      ##
###########################

 - Included support for the following special characters:
   "\n" = newline
   "\t" = tab
   "\\" = backslash
   "\""  = quote literal

 - Boolean types do exist as numbers:
   0 = False
   1 = True (by default)
   !0 = True (implied)

 - This language is forgiving and will allow for dangling commas
  EX: x : array [4] of number = { 1, 2, 3, 4, }
                                            ^ this is fine